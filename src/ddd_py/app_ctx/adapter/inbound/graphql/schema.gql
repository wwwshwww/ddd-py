directive @oneOf on INPUT_OBJECT
scalar Datetime

type Query {
    user(id: ID!): User
    users(ids: [ID!]!): [User]!
    findUser(
        filteringOptions: UserFilteringOptions,
        sortingOptions: [UserSortingOption!],
        page: Page
    ): [User!]!

    post(id: ID!): Post
    posts(ids: [ID!]): [Post]!
    findPost(
        filteringOptions: PostFilteringOptions,
        sortingOptions: [PostSortingOption!],
        page: Page
    ): [Post!]!

    postGenerateRequest(id: ID!): PostGenerateRequest
    postGenerateRequests(ids: [ID!]): [PostGenerateRequest]!
    findPostGenerateRequest(
        filteringOptions: PostGenerateRequestFilteringOptions,
        sortingOptions: [PostGenerateRequestSortingOption!],
        page: Page
    ): [PostGenerateRequest!]!

    reaction(id: ID!): Reaction
    reactions(ids: [ID!]): [Reaction]!
    findReaction(
        filteringOptions: ReactionFilteringOptions,
        sortingOptions: [ReactionSortingOption!],
        page: Page
    ): [Reaction!]!

    reactionPreset(id: ID!): ReactionPreset
    reactionPresets(ids: [ID!]): [ReactionPreset]!
    findReactionPreset(
        filteringOptions: ReactionPresetFilteringOptions,
        sortingOptions: [ReactionPresetSortingOption!],
        page: Page
    ): [ReactionPreset!]!
}

type User {
    id: ID!
    name: String!

    posts(
        filteringOptions: PostFilteringOptions,
        sortingOptions: [PostSortingOption!]
    ): [Post!]!
    postGenerateRequests(
        filteringOptions: PostGenerateRequestFilteringOptions,
        sortingOptions: [PostGenerateRequestSortingOption!],
    ): [PostGenerateRequest!]!
    reactions(
        filteringOptions: ReactionFilteringOptions,
        sortingOptions: [ReactionSortingOption!],
    ): [Reaction!]!
    reactionPreset(
        filteringOptions: ReactionPresetFilteringOptions,
        sortingOptions: [ReactionPresetSortingOption!],
    ): [ReactionPreset!]!
}

type Post {
    id: ID!
    content: String!
    creator: User!
    postGenerateRequest: PostGenerateRequest!
}

type PostGenerateRequest {
    id: ID!
    creator: User!
    keywords: [String!]!
    generationStatus: PostGenerateRequestGenStatus!
    requestedAt: Datetime!
    generatedPost: Post
}

enum PostGenerateRequestGenStatus {
    UNCOMPLETED
    COMPLETED
}

type Reaction {
    id: ID!
    reactionPreset: ReactionPreset!
    targetPost: Post!
    reactor: User!
    reactedAt: Datetime!
    isApproved: Boolean!
}

type ReactionPreset {
    id: ID!
    content: String!
    createdAt: Datetime!
    creator: User!
    associatedReactions(
        filteringOptions: ReactionFilteringOptions,
        sortingOptions: [ReactionSortingOption!]
    ): [Reaction!]!
}

input Page {
    offset: Int!
    limit: Int
}

input UserFilteringOptions {
    nameExact: String
    nameFront: String
    namePartial: String
    nameBack: String
}

input PostFilteringOptions {
    creatorIds: [ID!]
    reactionNumMore: Int
    reactionNumLess: Int
}

input PostGenerateRequestFilteringOptions {
    creatorIds: [ID!]
    excludeStatuses: [PostGenerateRequestGenStatus!]
}

input ReactionFilteringOptions {
    reactorIds: [ID!]
    excludeApproved: Boolean
}

input ReactionPresetFilteringOptions {
    creatorIds: [ID!]
}

input UserSortingOption @oneOf {
    nameAsc: Boolean
    getReactionNumAsc: Boolean
    giveReactionNumAsc: Boolean
}

input PostSortingOption @oneOf {
    idAsc: Boolean
    reactionNumAsc: Boolean
    creatorIdAsc: Boolean
    createdAtAsc: Boolean
}

input PostGenerateRequestSortingOption @oneOf {
    idAsc: Boolean
}

input ReactionSortingOption @oneOf {
    idAsc: Boolean
    reactionPresetIdAsc: Boolean
    reactedAtAsc: Boolean
}

input ReactionPresetSortingOption @oneOf {
    idAsc: Boolean
    contentAsc: Boolean
    createdAsc: Boolean
    reactedCountAsc: Boolean
}
