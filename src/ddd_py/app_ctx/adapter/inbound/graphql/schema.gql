type Query {
    user(id: ID!): User
    users(ids: [ID!]!): [User]!
    findUser(
        fo: UserFilteringOptions,
        so: [UserSortingOption!],
        page: Page
    ): [User!]!

    post(id: ID!): Post
    posts(ids: [ID!]): [Post]!
    findPost(
        fo: PostFilteringOptions,
        so: [PostSortingOption!],
        page: Page
    ): [Post!]!

    postGenerateRequest(id: ID!): PostGenerateRequest
    postGenerateRequests(ids: [ID!]): [PostGenerateRequest]!
    findPostGenerateRequest(
        fo: PostGenerateRequestFilteringOptions,
        so: [PostGenerateRequestSortingOption!],
        page: Page
    ): [PostGenerateRequest!]!

    reaction(id: ID!): Reaction
    reactions(ids: [ID!]): [Reaction]!
    findReaction(
        fo: ReactionFilteringOptions,
        so: [ReactionSortingOption!],
        page: Page
    ): [Reaction!]!

    reactionPreset(id: ID!): ReactionPreset
    reactionPresets(ids: [ID!]): [ReactionPreset]!
    findReactionPreset(
        fo: ReactionPresetFilteringOptions,
        so: [ReactionPresetSortingOption!],
        page: Page
    ): [ReactionPreset!]!
}

type User {
    id: ID!
    name: String!

    posts(
        fo: PostFilteringOptions,
        so: [PostSortingOption!]
    ): [Post!]!
    postGenerateRequests(
        fo: PostGenerateRequestFilteringOptions,
        so: [PostGenerateRequestSortingOption!],
    ): [PostGenerateRequest!]!
    reactions(
        fo: ReactionFilteringOptions,
        so: [ReactionSortingOption!],
    ): [Reaction!]!
    reactionPreset(
        fo: ReactionPresetFilteringOptions,
        so: [ReactionPresetSortingOption!],
    ): [ReactionPreset!]!
}

type Post {
    id: ID!
    content: String!
    creator: User!
    postGenerateRequest: PostGenerateRequest!
}

type PostGenerateRequest {
    id: ID!
    creator: User!
    keywords: [String!]!
    generationStatus: PostGenerateRequestGenStatus!
    requestedAt: String!
    generatedPost: Post
}

enum PostGenerateRequestGenStatus {
    UNCOMPLETED
    COMPLETED
}

type Reaction {
    id: ID!
    reactionPreset: ReactionPreset!
    targetPost: Post!
    reactor: User!
    reactedAt: String!
    isApproved: Boolean!
}

type ReactionPreset {
    id: ID!
    content: String!
    createdAt: String!
    creator: User!
    associatedReactions(
        fo: ReactionFilteringOptions,
        so: [ReactionSortingOption!]
    ): [Reaction!]!
}

input Page {
    offset: Int!
    limit: Int
}

input UserFilteringOptions {
    nameExact: String
    nameFront: String
    namePartial: String
    nameBack: String
}

input PostFilteringOptions {
    creatorIds: [ID!]
    reactionNumMore: Int
    reactionNumLess: Int
}

input PostGenerateRequestFilteringOptions {
    creatorIds: [ID!]
    excludeStatuses: [PostGenerateRequestGenStatus!]
}

input ReactionFilteringOptions {
    reactorIds: [ID!]
    excludeApproved: Boolean
}

input ReactionPresetFilteringOptions {
    creatorIds: [ID!]
}

enum UserSortingType {
    NAME
    GET_REACTION_NUM
    GIVE_REACTION_NUM
}

input UserSortingOption {
    type: UserSortingType!
    asc: Boolean!
}

enum PostSortingType {
    ID
    REACTION_NUM
    CREATOR_ID
    CREATED_AT
}

input PostSortingOption {
    type: PostSortingType!
    asc: Boolean!
}

enum PostGenerateRequestSortingType {
    ID
}

input PostGenerateRequestSortingOption {
    type: PostGenerateRequestSortingType!
    asc: Boolean!
}

enum ReactionSortingType {
    ID
    REACTION_PRESET_ID
    REACTED_AT
}

input ReactionSortingOption {
    type: ReactionSortingType!
    asc: Boolean!
}

enum ReactionPresetSortingType {
    ID
    CONTENT
    CREATED_AT
    REACTED_COUNT
}

input ReactionPresetSortingOption {
    type: ReactionPresetSortingType!
    asc: Boolean!
}
